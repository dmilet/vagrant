# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/centos7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  
    # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.define "sandbox" do |config|
	config.vm.provider "virtualbox" do |vb|
		# Display the VirtualBox GUI when booting the machine
		vb.gui = false
		config.vm.synced_folder "shared", "/vagrant", disabled: false
		config.vm.network "private_network", type: "dhcp"
  
		# this is on your local virtual box
		vb.memory = "1024"
		vb.cpus = 2
	end
  end

  config.vm.provision "shell", inline: <<-SHELL
  
	########################
	# GENERAL STUFF
	########################  
	yum -y install \
		epel-release \
		curl \
		wget \
		net-tools \
		git \
		python2-certbot.noarch \
		python2-certbot-nginx.noarch \
		docker
	
	curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
	chmod +x /usr/local/bin/docker-compose


	# Add user
	USERNAME=david
	useradd $USERNAME
	mkdir -p /home/$USERNAME/.ssh

    cp /vagrant/ssh/* /home/$USERNAME/.ssh
	chown -R ${USERNAME}:${USERNAME} /home/$USERNAME/.ssh
	chmod 600 /home/$USERNAME/.ssh/id_rsa
	chmod 644 /home/$USERNAME/.ssh/id_rsa.pub
	chmod 644 /home/$USERNAME/.ssh/authorized_keys
	
	# Create sudoers file for user to access docker
	cat >> /etc/sudoers.d/$USERNAME <<DOCKER
$USERNAME        ALL=(ALL)       NOPASSWD: /usr/bin/docker
$USERNAME        ALL=(ALL)       NOPASSWD: /usr/local/bin/docker-compose
DOCKER

	# only vagrant user is allowed to sudo to root and execute all commands as root
	# so we allow ourselves to connect as vagrant user over ssh
	cat /home/$USERNAME/.ssh/authorized_keys >> /home/vagrant/.ssh/authorized_keys
	
	########################
	#       BACK END 
	########################  
	#mkdir -p /opt/carpool
	#cd /opt/carpool
	#git clone https://github.com/voteamerica/backend.git
	#cd backend
	
	# looks like there are some iptables issues with docker networking
	# issue is that it's not possible to perform name resolution 
	# from inside the container to a name on internet
	# remember it's like this Container->VirtualBox VM->Windows->Router NAT
	# Anyway, my lack of understanding of this issue 
	# is acceptable when all we need to do stop the firewall and restart docker service
	systemctl stop firewalld
	systemctl stop docker
	systemctl start docker
	
	#/usr/local/bin/docker-compose -f docker-compose-build.yml build
	
	systemctl stop docker
	systemctl start firewalld
	systemctl start docker
	systemctl enable docker
	
	
	# allow olny https, not http incoming traffic
	systemctl enable firewalld
	systemctl start firewalld
	firewall-cmd --remove-service=http
	firewall-cmd --add-service=https
	firewall-cmd --runtime-to-permanent
	
	
	
SHELL
  
end
